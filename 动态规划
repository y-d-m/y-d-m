# 动态规划

动态规划，就是把已经求过的答案存起来，减少时间复杂度。

动态规划常用来进行多阶段决策问题的最优化。

我们以[P1216](https://www.luogu.com.cn/problem/P1216)来举例。

有两种形式：

1. 自顶向下的递归

   ```cpp
   #include <bits/stdc++.h>
   using namespace std;
   int r;
   int a[1001][1001],dp[1001][1001];
   int dfs(int x,int y)
   {
   	if(x==r)
   	{
   		return a[x][y];
   	}
   	if(dp[x][y]!=-1)
   	{
   		return dp[x][y];
   	}
   	dp[x][y]=max(dfs(x+1,y),dfs(x+1,y+1))+a[x][y];
   	return dp[x][y];
   }
   int main()
   {
   	cin>>r;
   	for(int i=1;i<=r;i++)
   	{
   		for(int j=1;j<=i;j++)
   		{
   			cin>>a[i][j];
   		}
   	}
   	memset(dp,-1,sizeof(dp));
   	cout<<dfs(1,1);
   
   	return 0;
   }
   ```

   这里的dp,就是记录答案的数组，而`int`类型的`dfs`，他的返回值就是`a[x][y]`到塔底的最大距离。

   ```cpp
   if(dp[x][y]!=-1)
   {
   	return dp[x][y];
   }
   ```

   这个if的意思是，如果之前求过这个部分的结果，就直接返回，不用再求。

2. 自底向上的递推

   ```cpp
   #include <bits/stdc++.h>
   using namespace std;
   int n;
   int dp[1000001];
   int main()
   {
   	cin>>n;
   	dp[1]=0;
   	for(int i=2;i<=n;i++)
   	{
   		if(i%2==1)
   		{
   			dp[i]=dp[i-1]+1;
   		}
   		else
   		{
   			dp[i]=min(dp[i-1],dp[i/2])+1;
   		}
   	}
   	cout<<dp[n];
   	return 0;
   }
   ```

   这个代码的原理其实和上面的差不多，但是动态规划更多会以这种形式呈现。
